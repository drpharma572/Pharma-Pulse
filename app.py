# app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tempfile
import os
from fpdf import FPDF
import numpy as np

st.set_page_config(page_title="PharmaPulse Excel Viewer", layout="wide")
st.title("PharmaPulse Interactive Excel Viewer")  # Removed emojis for PDF safety

# ------------------------
# File upload
# ------------------------
uploaded_file = st.file_uploader(
    "Upload an Excel file",
    type=["xlsx"],
)

# ------------------------
# Load and preview data
# ------------------------
if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.success(f"File loaded successfully: {uploaded_file.name}")

    st.subheader("Data Preview")
    st.dataframe(df)

    st.subheader("Summary Statistics")
    st.dataframe(df.describe(include='all'))

    st.subheader("Data Filters")
    filter_cols = st.multiselect("Select columns to filter", df.columns.tolist())
    filtered_df = df.copy()
    if filter_cols:
        for col in filter_cols:
            unique_vals = df[col].dropna().unique().tolist()
            selected_vals = st.multiselect(f"Filter {col}", unique_vals, default=unique_vals)
            filtered_df = filtered_df[filtered_df[col].isin(selected_vals)]
    st.write(f"Filtered Data â€” {len(filtered_df)} rows remaining.")

    # ------------------------
    # Visualization
    # ------------------------
    st.subheader("Data Visualization")

    chart_images = []

    numeric_cols = filtered_df.select_dtypes(include="number").columns.tolist()
    categorical_cols = filtered_df.select_dtypes(include="object").columns.tolist()

    # Bar chart
    if numeric_cols and categorical_cols:
        num_col = st.selectbox("Select numeric column for Bar chart", numeric_cols)
        cat_col = st.selectbox("Select categorical column for Bar chart", categorical_cols)
        bar_data = filtered_df.groupby(cat_col)[num_col].sum().reset_index()
        fig, ax = plt.subplots()
        sns.barplot(x=cat_col, y=num_col, data=bar_data, estimator=np.sum, ci=None, ax=ax)
        ax.set_title(f"{num_col} by {cat_col}")
        st.pyplot(fig)
        temp_bar = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        fig.savefig(temp_bar.name, bbox_inches='tight')
        chart_images.append(temp_bar.name)
        plt.close(fig)

    # Pie chart
    if categorical_cols:
        pie_col = st.selectbox("Select categorical column for Pie chart", categorical_cols)
        pie_data = filtered_df[pie_col].value_counts()
        fig2, ax2 = plt.subplots()
        ax2.pie(pie_data.values, labels=pie_data.index, autopct="%1.1f%%")
        ax2.set_title(f"Pie chart of {pie_col}")
        st.pyplot(fig2)
        temp_pie = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        fig2.savefig(temp_pie.name, bbox_inches='tight')
        chart_images.append(temp_pie.name)
        plt.close(fig2)

    # Histogram
    if numeric_cols:
        hist_col = st.selectbox("Select numeric column for Histogram", numeric_cols)
        fig3, ax3 = plt.subplots()
        ax3.hist(filtered_df[hist_col].dropna(), bins=10, edgecolor='black')
        ax3.set_title(f"Histogram of {hist_col}")
        st.pyplot(fig3)
        temp_hist = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        fig3.savefig(temp_hist.name, bbox_inches='tight')
        chart_images.append(temp_hist.name)
        plt.close(fig3)

    # ------------------------
    # Auto-generated Results & Conclusion
    # ------------------------
    st.subheader("Auto-generated Research Results & Conclusion")
    result_text = f"The dataset contains {len(filtered_df)} rows and {len(filtered_df.columns)} columns."
    conclusion_text = f"The summary and visualizations indicate trends and distributions of the dataset for research purposes."
    st.text_area("Results", result_text, height=100)
    st.text_area("Conclusion", conclusion_text, height=100)

    # ------------------------
    # PDF generation
    # ------------------------
    def create_pdf(df, results, charts):
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)

        # Title page
        pdf.add_page()
        pdf.set_font("Arial", "B", 20)
        pdf.multi_cell(0, 10, "PharmaPulse", align="C")
        pdf.ln(10)
        pdf.set_font("Arial", "", 12)
        pdf.multi_cell(0, 10, "Generated by pharmapulsebydrk", align="C")

        # Sample data
        pdf.add_page()
        pdf.set_font("Arial", "B", 16)
        pdf.multi_cell(0, 10, "Sample Data Preview")
        pdf.set_font("Arial", "", 10)
        pdf.multi_cell(0, 6, df.head(10).to_string())

        # Results
        pdf.add_page()
        pdf.set_font("Arial", "B", 16)
        pdf.multi_cell(0, 10, "Results")
        pdf.set_font("Arial", "", 12)
        pdf.multi_cell(0, 8, results)

        # Charts
        for chart_path in charts:
            pdf.add_page()
            pdf.image(chart_path, x=10, y=20, w=180)
            pdf.set_y(-15)
            pdf.set_font("Arial", "I", 8)
            pdf.cell(0, 10, "pharmapulsebydrk", 0, 0, "C")

        # Conclusion
        pdf.add_page()
        pdf.set_font("Arial", "B", 16)
        pdf.multi_cell(0, 10, "Conclusion")
        pdf.set_font("Arial", "", 12)
        pdf.multi_cell(0, 8, conclusion_text)

        # Clean temp files
        for chart_path in charts:
            if os.path.exists(chart_path):
                os.remove(chart_path)

        temp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
        pdf.output(temp_pdf.name)
        return temp_pdf.name

    pdf_file_path = create_pdf(filtered_df, result_text, chart_images)

    with open(pdf_file_path, "rb") as f:
        st.download_button("Download PDF Report", data=f, file_name="PharmaPulse_Report.pdf", mime="application/pdf")
